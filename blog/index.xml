<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on Retold</title><link>https://azure562.github.io/blog/</link><description>Recent content in Blogs on Retold</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© {year}</copyright><lastBuildDate>Sat, 23 Oct 2021 09:06:12 +0200</lastBuildDate><atom:link href="https://azure562.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Write (and rewrite) - Part II</title><link>https://azure562.github.io/blog/how-to-write-2/</link><pubDate>Sat, 23 Oct 2021 09:06:12 +0200</pubDate><guid>https://azure562.github.io/blog/how-to-write-2/</guid><description>A peculiar challenge of technical communication is to convey complex information without confusing the audience. But what is complex?
Merriam-Webster defines complex as &amp;ldquo;a group of things that are connected in complicated ways&amp;rdquo;. In other words, complex is the result of the (difficult to analyze, understand, or explain) ways things relate to each other.
So, if we can figure out how to make the ways things relate to each other easy to understand, would that solve the problem of conveying complex information?</description></item><item><title>How to Write (and I know you know) - Part I</title><link>https://azure562.github.io/blog/how-to-write-1/</link><pubDate>Sun, 17 Oct 2021 20:38:56 +0200</pubDate><guid>https://azure562.github.io/blog/how-to-write-1/</guid><description>Photo by Ketut Subiyanto from Pexels
If you have established your credibility as a technical writer or communicator, itâ€™s only natural that people come to you for advice on writing.
Though almost every profession has to deal with some writing tasks, most of the time a well-defined template could guarantee a decent output.
Chances are, those who come to you are not asking for a template. If they are not committed to becoming a tech writer, what advice would you give, advice that is generic enough while still focus on technical aspects (a knowledge-sharing topic, a how-to guide, or a draft for a section in tech docs)?</description></item><item><title>Lean Writer</title><link>https://azure562.github.io/blog/lean-writer/</link><pubDate>Sun, 10 Oct 2021 19:58:41 +0200</pubDate><guid>https://azure562.github.io/blog/lean-writer/</guid><description>How does a tech writer create value in the customer-centric era?
Photo by Jessica Lynn Lewis on Pexels
Still optimizing for editorial skill? Though the job title of Tech Writer is nothing new, the scope of a tech writerâ€™s work is never clear-cut.
Traditionally, tech writers are responsible for:
editing the drafts provided by developers applying some editorial styles publishing the final user documentation Such a perspective puts tech writers at the downstream of product development and leads to the practice of allocating one tech writer to multiple projects (often across different products).</description></item><item><title>Google Analytics for Tech Docs</title><link>https://azure562.github.io/blog/ga-for-doc/</link><pubDate>Fri, 01 Oct 2021 19:24:22 +0200</pubDate><guid>https://azure562.github.io/blog/ga-for-doc/</guid><description>You might have heard about the build-measure-learn feedback loop, a core component of the Lean Startup ðŸ¦„ methodology. Measure is important to learn how customers/audiences respond to a product or service.
But, how do you measure the performance of your tech docs? ðŸ“š
In this article, I&amp;rsquo;ll share some learnings when using Google Analytics to understand visitors' reactions to a tech docs website.
What is Google Analytics? First thing first, Google Analytics:</description></item><item><title>Automate Hugo Deployment to GitHub Page</title><link>https://azure562.github.io/blog/set-up-gh-page/</link><pubDate>Sat, 25 Sep 2021 19:35:32 +0200</pubDate><guid>https://azure562.github.io/blog/set-up-gh-page/</guid><description>Setting up a blog under your own control might sound tricky, unless you know the secret &amp;hellip; Mine is Hugo + GitHub Pages.
There are lots of helpful articles available online, a proof that many people have tried it out.
Below is a summary of my approach:
Set up a repository for the source content.
Set up another repository for the GitHub page, which will host your generated website.</description></item><item><title>Reference Information</title><link>https://azure562.github.io/blog/reference-info/</link><pubDate>Sat, 18 Sep 2021 20:01:11 +0200</pubDate><guid>https://azure562.github.io/blog/reference-info/</guid><description>I put some links here which I find useful, hopefully you also find so.
Style The Chicago Manual of Style
Microsoft Writing Style Guide
Writing Course Google Technical Writing Course Blog I&amp;rsquo;d rather be writing
Technical Writer
Content Marketing Content Marketing Institute Content Management/Stategy The Content Wrangler</description></item></channel></rss>